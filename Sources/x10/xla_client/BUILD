licenses(["notice"])  # Apache 2.0

load(
    "@org_tensorflow//tensorflow/core/platform/default:build_config.bzl",
    "tf_proto_library_cc",
)

tf_proto_library_cc(
    name = "mesh_service_proto",
    srcs = ["mesh_service.proto"],
    has_services = 1,
    cc_api_version = 2,
    cc_grpc_version = 1,
    protodeps = [
        "@org_tensorflow//tensorflow/core/protobuf/tpu:topology_proto",
    ],
)

cc_library(
    name = "xrt_computation_client",
    srcs = [
        "computation_client.cc",
        "mesh_service.cc",
        "metrics.cc",
        "metrics_reader.cc",
        "multi_wait.cc",
        "sys_util.cc",
        "tf_logging.cc",
        "thread_pool.cc",
        "triggered_task.cc",
        "util.cc",
        "xla_util.cc",
        "xrt_computation_client.cc",
        "xrt_local_service.cc",
        "xrt_session.cc",
        "xrt_session_cache.cc",
    ],
    hdrs = [
        "async_task.h",
        "cache.h",
        "computation_client.h",
        "debug_macros.h",
        "mesh_service.h",
        "metrics.h",
        "metrics_reader.h",
        "multi_wait.h",
        "sys_util.h",
        "tf_logging.h",
        "thread_pool.h",
        "triggered_task.h",
        "types.h",
        "unique.h",
        "util.h",
        "xla_util.h",
        "xrt_computation_client.h",
        "xrt_local_service.h",
        "xrt_session.h",
        "xrt_session_cache.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":mesh_service_proto_cc",
        "@org_tensorflow//tensorflow:grpc",
        "@org_tensorflow//tensorflow:grpc++",
        "@org_tensorflow//tensorflow/cc:cc_ops",
        "@org_tensorflow//tensorflow/cc:client_session",
        "@org_tensorflow//tensorflow/cc:ops",
        "@org_tensorflow//tensorflow/cc:scope",
        "@org_tensorflow//tensorflow/compiler/xla:literal_util",
        "@org_tensorflow//tensorflow/compiler/xla:shape_util",
        "@org_tensorflow//tensorflow/compiler/xla:status",
        "@org_tensorflow//tensorflow/compiler/xla:status_macros",
        "@org_tensorflow//tensorflow/compiler/xla:statusor",
        "@org_tensorflow//tensorflow/compiler/xla:types",
        "@org_tensorflow//tensorflow/compiler/xla:util",
        "@org_tensorflow//tensorflow/compiler/xla:xla_data_proto_cc",
        "@org_tensorflow//tensorflow/compiler/xla/client:xla_computation",
        "@org_tensorflow//tensorflow/compiler/xla/service:hlo",
        "@org_tensorflow//tensorflow/compiler/xla/service:hlo_proto_cc",
        "@org_tensorflow//tensorflow/compiler/xrt:xrt_proto_cc",
        "@org_tensorflow//tensorflow/compiler/xrt:xrt_server",
        "@org_tensorflow//tensorflow/compiler/xrt/cc:xrt_ops",
        "@org_tensorflow//tensorflow/core:core_cpu",
        "@org_tensorflow//tensorflow/core:framework",
        "@org_tensorflow//tensorflow/core:lib",
        "@org_tensorflow//tensorflow/core:protos_all_cc",
        "@org_tensorflow//tensorflow/core/distributed_runtime:server_lib",
        "@org_tensorflow//tensorflow/core/distributed_runtime/rpc:grpc_runtime",
        "@org_tensorflow//tensorflow/core/kernels:conv_ops",
        "@org_tensorflow//tensorflow/core/kernels:data_flow",
        "@org_tensorflow//tensorflow/core/protobuf/tpu:topology_proto_cc",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/numeric:int128",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "@com_google_absl//absl/types:span",
    ],
 )
